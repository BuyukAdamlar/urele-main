@page "/login"
@layout Blank
@inject IJSRuntime JS
<head>
    <title>Giriş Yap</title>
    <link rel="stylesheet" href="Log/fonts/material-icon/css/material-design-iconic-font.min.css">

    <link rel="stylesheet" href="Log/css/style.css">
    <meta name="robots" content="noindex, follow">
</head>
<div class="main" style="padding:80px;">
        <section class="sign-in">
            <div class="container">
                <div class="signin-content">
                    <div class="signin-image">
                        <figure><img src="Log/images/signin-image.jpg" alt="sing up image"></figure>
                        <a href="/register" class="signup-image-link">Hesap Oluştur</a>
                    </div>
                    <div class="signin-form">
                        <h2 class="form-title">Giris Yap</h2>
                        <form method="POST" class="register-form" id="login-form">
                            <div class="form-group">
                                <label for="your_name"><i class="zmdi zmdi-account material-icons-name"></i></label>
                                <input type="text" name="your_name" id="your_name" placeholder="İsim" />
                            </div>
                            <div class="form-group">
                                <label for="your_pass"><i class="zmdi zmdi-lock"></i></label>
                                <input type="password" name="your_pass" id="your_pass" placeholder="Şifre" />
                                <i class="circular eye link icon" @onclick=@(async()=>await JS.InvokeVoidAsync("togglePassword"))></i>
                            </div>
                            
                            <div class="form-group">
                                <input type="checkbox" name="remember-me" id="remember-me" class="agree-term" />
                                <label for="remember-me" class="label-agree-term"><span><span></span></span>Beni Hatırla</label>
                            </div>
                            <div class="form-group form-button">
                                <input type="submit" name="signin" id="signin" class="form-submit" value="Giriş Yap" />
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </section>
    </div>


@inject IJSRuntime JS
@inject ILocalStorageService localStore
@inject NavigationManager navman
@code {
	bool rememberme = true;
	string id = "";
	string pass = "";
	string errormessage = "";
	bool isdisabled = false;

	protected async Task togglePassword()
	{
		try
		{
			await JS.InvokeVoidAsync("togglePassword");
		}
		catch (Exception ex)
		{
		}
	}

	protected override async Task<Task> OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				string token = await localStore.GetItemAsStringAsync("token");
				if (token != null && token != String.Empty && token.Trim() != "")
				{
					var res = await RunHttp.Post<TokenEntity>("User/login/token", new { token = token });
					if (res.isSuccess)
					{
						navman.NavigateTo("/mylinks");
					}
				}
			}
			catch
			{

			}
		}
		return base.OnAfterRenderAsync(firstRender);

	}

	protected async Task login()
	{
		isdisabled = true;
		errormessage = "";
		var res = await RunHttp.Post<TokenEntity>("https://apiurele.azurewebsites.net/User/login", new LoginModel
			{
				id = this.id,
				password = this.pass
			});
		if (res.isSuccess)
		{
			await localStore.ClearAsync();
			await localStore.SetItemAsStringAsync("token", res.Result.token);
			navman.NavigateTo("/mylinks");
		}
		else if (res.status == System.Net.HttpStatusCode.Conflict)
		{
			errormessage = "Lütfen mailinize gönderilen link ile hesabınızı aktifleştiriniz!";
		}
		else if (res.status == System.Net.HttpStatusCode.Unauthorized)
		{
			errormessage = "Giriş bilgileriniz hatalı. Lütfen kontrol ediniz.";
		}
		else
		{
			errormessage = "Hatalı giriş, tekrar deneyiniz.";
		}
		isdisabled = false;
		await InvokeAsync(StateHasChanged);
	}
}